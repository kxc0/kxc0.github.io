<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于字体那些事儿</title>
    <url>/2022/05/10/01.%E5%85%B3%E4%BA%8E%E5%AD%97%E4%BD%93%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
    <content><![CDATA[<h1 id="前言背景"><a href="#前言背景" class="headerlink" title="前言背景"></a>前言背景</h1><p>前段时间，老师带我们做了网易云音乐项目，最近课比较少，想利用课余时间完善一下“歌词详情界面”。</p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>网易云中的“歌词展示界面”只提供了“调整歌词字体大小”功能，但同为音乐播放软件的酷狗音乐却提供了切换歌词字体样式的功能。</p>
<p>在开发项目中，可以使用自带的字体，也可以自己下载字体包去用。显然，酷狗音乐使用的是下载字体包实现字体的多样式切换。</p>
<h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>项目中都会有重置样式表（<code>reset.css</code>），用来统一修改项目的开发样式，修改项目的字体，也就是在<code>reset.css</code>中去修改。</p>
<h2 id="步骤一：将字体包保存到项目中"><a href="#步骤一：将字体包保存到项目中" class="headerlink" title="步骤一：将字体包保存到项目中"></a>步骤一：将字体包保存到项目中</h2><blockquote>
<p>练习时可使用<a href="https://www.ypppt.com/ziti/"><strong>优品ppt提供的字体库</strong></a></p>
</blockquote>
<p>在项目中的<code>src</code>目录下新建<code>common</code>文件夹，<code>common</code>文件夹再新建<code>css</code>文件夹，将字体包<code>HandwrittenFont.ttf</code>放在<code>css</code>目录下，<code>css</code>目录下新建文件<code>reset.css</code>（重置样式表）。</p>
<h2 id="步骤二：引入字体"><a href="#步骤二：引入字体" class="headerlink" title="步骤二：引入字体"></a>步骤二：引入字体</h2><p><code>@font-face CSS</code>可指定一个用于显示文本的自定义字体；字体能从远程服务器或者用户本地安装已有的字体加载</p>
<p>在重置样式表中引入字体：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 引入字体 */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;HandFont&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./HandwrittenFont.ttf&#x27;</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步骤三：使用字体"><a href="#步骤三：使用字体" class="headerlink" title="步骤三：使用字体"></a>步骤三：使用字体</h2><p>在重置样式表中使用字体：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 使用字体 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;HandFont&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>src</code>目录下的<code>App.vue</code>中引入重置样式表：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">    <span class="keyword">@import</span> <span class="string">&quot;./common/css/reset.css&quot;</span>;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h1><p>按上述步骤操作完成之后，项目就有了自己的个性化字体，但运行项目后，界面刷新字体闪烁（先展示默认字体，再渲染成自定义字体），解决办法还是比较简单的，在<code>public</code>目录下的<code>index.html</code>文件中进行如下修改：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 在 vue 模板编译完成之前，不显示模板编译内容 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于我们自己定义的字体文件因为包含了汉语，比较大，可使用“字蛛”插件进行压缩（删去用不到的字符后重新生成文件）<a href="https://github.com/allanguys/font-spider-plus">GitHub地址</a>、<a href="https://github.com/aui/font-spider/blob/master/README-ZH-CN.md">官方文档</a></p>
<h1 id="知识拓展"><a href="#知识拓展" class="headerlink" title="知识拓展"></a>知识拓展</h1><p>选择一套精心设计过的字体能极大地提升产品的视觉感受。然而不像拉丁语系翻来覆去就那么一点西文字符，常见的字体就100+KB，而中文字体要包含常用汉字动辄 10+ MB 的体积（比如，著名的思源黑体光常规字重就高达23MB）实在<strong>不适合内嵌到 Web</strong>。</p>
<p>所以常见的做法都是选择操作系统自带的字体。一般放多套字体按顺序渲染，若第一个字体操作系统已安装即可渲染，未安装则尝试渲染第二个字体，以此类推直至所有字体尝试渲染都失败的话就回退（fallback）到浏览器默认字体。</p>
<blockquote>
<p>注意，将西文字体放在中文字体之前。中文字体自带了西文，但是展示效果不佳。</p>
</blockquote>
<h2 id="Serif-VS-Sans-Serif"><a href="#Serif-VS-Sans-Serif" class="headerlink" title="Serif VS Sans-Serif"></a>Serif VS Sans-Serif</h2><p>字体一般分为衬线字体（<code>Serif</code>）和无衬线字体（<code>Sans-Serif</code>）。在字体排印学里，衬线指的是字母结构笔画之外的装饰性笔画。有衬线的字体叫衬线体（<code>serif</code>），也叫“白体”；没有衬线的字体，则叫做无衬线体（<code>sans-serif</code>），相对的也叫“黑体”。</p>
<ul>
<li><code>Serif</code>的字体容易辨认，因此易读性较高。反之<code>Sans Serif</code>则较醒目，但在行文阅读的情況下，<code>Sans-Serif</code>容易造成字母辨认的困扰，常会有来回重读及上下行错乱的情形。</li>
<li><code>Serif</code>强调了字母笔画的开始及结束，因此较易前后连续性的辨识。 <code>Serif</code>强调一个 word，而非单一的字母，反之<code>Sans-Serif</code>则强调个别字母。</li>
<li>在小字体的场合，通常<code>Sans-Serif</code>比<code>Serif</code>更清晰。</li>
</ul>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><blockquote>
<p>一般在正文里使用<code>Serif</code>，显示效果较为工整，但注意字体不能设置的过小，<code>Serif</code>在高分屏显示效果最佳，建议非高分屏使用<code>Sans Serif</code>字体。<br>标题和除正文之外的地方适合用<code>Sans Serif</code>，较为醒目和易辨识。</p>
</blockquote>
<p>下面这段代码可用于检测高分屏：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测是否为高分屏</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isHighDensity</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">`undefined`</span> &amp;&amp;</span><br><span class="line">        ((<span class="variable language_">window</span>.<span class="property">matchMedia</span> &amp;&amp;</span><br><span class="line">            (<span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(</span><br><span class="line">                <span class="string">&#x27;only screen and (min-resolution: 124dpi), only screen and (min-resolution: 1.3dppx), only screen and (min-resolution: 48.8dpcm)&#x27;</span></span><br><span class="line">            ).<span class="property">matches</span> ||</span><br><span class="line">                <span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(</span><br><span class="line">                    <span class="string">&#x27;only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (min-device-pixel-ratio: 1.3)&#x27;</span></span><br><span class="line">                ).<span class="property">matches</span>)) ||</span><br><span class="line">            (<span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> &gt; <span class="number">1.3</span>))</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="中文字体的兼容写法"><a href="#中文字体的兼容写法" class="headerlink" title="中文字体的兼容写法"></a>中文字体的兼容写法</h2><p>一些中文字体，例如<code>font-family: &#39;宋体&#39;</code>，由于字符编码的问题，少部分浏览器解释这个代码的时候，中文出现乱码，这个时候设定的字体无法正常显示。</p>
<p>所以通常会转化成对应的英文写法或者是对应的 unicode 编码，<code>font-family:&#39;宋体&#39;</code>-&gt;<code>font-family: &#39;\5b8b\4f53&#39;</code>。<br><code>\5b8b\4f53</code>是宋体两个中文字的<code>unicode</code>编码表示。类似的写法还有：</p>
<ul>
<li>黑体： <code>\9ED1\4F53</code></li>
<li>微软雅黑：<code>\5FAE\8F6F\96C5\9ED1</code></li>
<li>华文细黑：<code>\534E\6587\7EC6\9ED1</code></li>
<li>华文黑体：<code>\534E\6587\9ED1\4F53</code></li>
</ul>
<blockquote>
<p><code>Unicode</code>编码： 人们希望在一套系统里面能够容纳所有字符，<code>Unicode</code>编码解决传统的字符编码方案的局限性，每个字符占用 2 字节。这样理论上一共最多可以表示2^16（即65536）个字符。基本满足各种语言的使用。</p>
</blockquote>
<h2 id="字体定义的细节"><a href="#字体定义的细节" class="headerlink" title="字体定义的细节"></a>字体定义的细节</h2><p>其他一些小细节也很重要，譬如定义字体的时候，何时需要在字体两端添加引号。像这样：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft YaHei&#x27;</span>, <span class="string">&#x27;黑体-简&#x27;</span>, <span class="string">&#x27;\5b8b\4f53&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当字体名字中间有空格，中文名字体及<code>Unicode</code>字符编码表示的中文字体，为了保证兼容性，都建议在字体两端添加单引号或者双引号。</p>
<h2 id="字体定义顺序"><a href="#字体定义顺序" class="headerlink" title="字体定义顺序"></a>字体定义顺序</h2><p>字体定义顺序是一门学问，通常而言，我们定义字体的时候，会定义多个字体或字体系列。<br>看下淘宝首页对字体的定义：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>:tahoma,arial,<span class="string">&#x27;Hiragino Sans GB&#x27;</span>,<span class="string">&#x27;\5b8b\4f53&#x27;</span>,sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>使用 <code>tahoma</code> 作为首选的西文字体，小字号下结构清晰端整、阅读辨识容易；</li>
<li>用户电脑未预装 tohoma，则选择 <code>arial</code> 作为替代的西文字体，覆盖 windows 和 MAC OS；</li>
<li><code>Hiragino Sans GB</code>为冬青黑体，首选的中文字体，保证了<code>MAC</code>用户的观看体验；</li>
<li><code>Windows</code>下没有预装冬青黑体，则使用<code>&#39;\5b8b\4f53&#39;</code>宋体为替代的中文字体方案，小字号下有着不错的效果；</li>
<li>最后使用无衬线系列字体<code>sans-serif</code>结尾，保证旧版本操作系统用户能选中一款电脑预装的无衬线字体，向下兼容。</li>
</ol>
<h2 id="字体书写规则"><a href="#字体书写规则" class="headerlink" title="字体书写规则"></a>字体书写规则</h2><p>综上，总结一下，我觉得字体<code>font-family</code>定义的原则大概遵循：</p>
<h3 id="1、兼顾中西"><a href="#1、兼顾中西" class="headerlink" title="1、兼顾中西"></a>1、兼顾中西</h3><p>中文或者西文（英文）都要考虑到。</p>
<h3 id="2、西文在前，中文在后"><a href="#2、西文在前，中文在后" class="headerlink" title="2、西文在前，中文在后"></a>2、西文在前，中文在后</h3><p>由于大部分中文字体也是带有英文部分的，但是英文部分又不怎么好看，同理英文字体中大多不包含中文。<br>所以通常会先进行英文字体的声明，选择最优的英文字体，这样不会影响到中文字体的选择，中文字体声明则紧随其次。</p>
<h3 id="3、兼顾多操作系统"><a href="#3、兼顾多操作系统" class="headerlink" title="3、兼顾多操作系统"></a>3、兼顾多操作系统</h3><p>选择字体的时候要考虑多操作系统。例如<code>MAC OS</code>下的很多中文字体在<code>Windows</code>都没有预装，为了保证<code>MAC</code>用户的体验，在定义中文字体的时候，先定义<code>MAC</code>用户的中文字体，再定义<code>Windows</code>用户的中文字体；</p>
<h3 id="4、兼顾旧操作系统，以字体族系列-serif-和-sans-serif-结尾"><a href="#4、兼顾旧操作系统，以字体族系列-serif-和-sans-serif-结尾" class="headerlink" title="4、兼顾旧操作系统，以字体族系列 serif 和 sans-serif 结尾"></a>4、兼顾旧操作系统，以字体族系列 serif 和 sans-serif 结尾</h3><p>当使用一些非常新的字体时，要考虑向下兼容，兼顾到一些极旧的操作系统，使用字体族系列<code>serif</code>和<code>sans-serif</code>结尾总归是不错的选择。</p>
]]></content>
      <categories>
        <category>vue项目</category>
      </categories>
      <tags>
        <tag>字体适配</tag>
      </tags>
  </entry>
  <entry>
    <title>硅谷外卖购物车模块数据处理</title>
    <url>/2022/08/10/26.%E7%A1%85%E8%B0%B7%E5%A4%96%E5%8D%96%E8%B4%AD%E7%89%A9%E8%BD%A6/</url>
    <content><![CDATA[<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><img data-src="https://cdn.jsdelivr.net/gh/kxc0/tu_chuang/Blog/202208121441555.gif" style="zoom:33%;" />

<h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p>显而易见，若想查找到精确的菜品，可通过作为唯一值的<code>id</code>一步步查找，商家<code>id</code>，分类<code>id</code>，菜品<code>id</code>。<br><img data-src="https://cdn.jsdelivr.net/gh/kxc0/tu_chuang/Blog/202208112111378.png" style="zoom:33%;" /></p>
<h3 id="axios请求到数据："><a href="#axios请求到数据：" class="headerlink" title="axios请求到数据："></a><code>axios</code>请求到数据：</h3><p>分类列表：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;折扣&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;进店必买&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;新品&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;福利优惠&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;精品菜品&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;人气套餐&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;招牌菜区&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;爆款疯抢&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<p>菜品列表：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;南瓜粥&quot;</span><span class="punctuation">,</span> photo<span class="punctuation">:</span> <span class="string">&quot;image/food/a1.jpg&quot;</span><span class="punctuation">,</span> info<span class="punctuation">:</span> <span class="string">&quot;甜粥&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;红薯薏米粥&quot;</span><span class="punctuation">,</span> photo<span class="punctuation">:</span> <span class="string">&quot;image/food/a2.jpg&quot;</span><span class="punctuation">,</span> info<span class="punctuation">:</span> <span class="string">&quot;营养粥&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;酸辣土豆丝&quot;</span><span class="punctuation">,</span> photo<span class="punctuation">:</span> <span class="string">&quot;image/food/a3.jpg&quot;</span><span class="punctuation">,</span> info<span class="punctuation">:</span> <span class="string">&quot;热菜&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;西红柿炒鸡蛋&quot;</span><span class="punctuation">,</span> photo<span class="punctuation">:</span> <span class="string">&quot;image/food/a4.jpg&quot;</span><span class="punctuation">,</span> info<span class="punctuation">:</span> <span class="string">&quot;热菜&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;凉拌黄瓜&quot;</span><span class="punctuation">,</span> photo<span class="punctuation">:</span> <span class="string">&quot;image/food/a5.jpg&quot;</span><span class="punctuation">,</span> info<span class="punctuation">:</span> <span class="string">&quot;凉菜&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>已知上面的数据，可以在<code>Vuex</code>状态管理库中设置数据及方法（仅展示了与购物车模块有关部分）。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">baseUrl</span>: fn.<span class="property">baseUrl</span>,  <span class="comment">// 基准Url</span></span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,               <span class="comment">// 要展示的商家id</span></span><br><span class="line">    <span class="attr">category</span>: [],         <span class="comment">// 商家食品分类列表</span></span><br><span class="line">    <span class="attr">foodInfo</span>: [],         <span class="comment">// 食品类别详情</span></span><br><span class="line">    <span class="attr">cart</span>: [               <span class="comment">// 购物车。存放用户的点餐数据（商家id，类别id，食品id，数量）</span></span><br><span class="line">      &#123; <span class="attr">shopId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">categoryId</span>: <span class="number">1</span>, <span class="attr">foodId</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;南瓜粥&quot;</span>, <span class="attr">price</span>: <span class="number">9.5</span>, <span class="attr">nums</span>: <span class="string">&#x27;2&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">shopId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">categoryId</span>: <span class="number">1</span>, <span class="attr">foodId</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;红薯薏米粥&quot;</span>, <span class="attr">price</span>: <span class="number">9.5</span>, <span class="attr">nums</span>: <span class="string">&#x27;2&#x27;</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 获取当前浏览商家界面购物车 总数量 和 总价格</span></span><br><span class="line">    <span class="attr">total</span>: <span class="keyword">function</span> (<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> price = <span class="number">0</span>;</span><br><span class="line">      state.<span class="property">cart</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">shopId</span> == state.<span class="property">id</span>) &#123;</span><br><span class="line">          num += <span class="built_in">parseInt</span>(item.<span class="property">nums</span>);</span><br><span class="line">          price += <span class="built_in">parseInt</span>(item.<span class="property">nums</span>) * item.<span class="property">price</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">num</span>: num, <span class="attr">price</span>: price &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过滤出当前浏览商家的购物车菜单</span></span><br><span class="line">    <span class="attr">shops</span>: <span class="keyword">function</span> (<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">cart</span>.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">shopId</span> == state.<span class="property">id</span>; <span class="comment">// 返回“商品的商家id == 浏览的商家id”的项，添加到shops数组</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该函数要在商家详情页首先调用。在商家列表页通过单击事件将‘商品id’传到商家详情页，详情页要首先执行该函数。</span></span><br><span class="line"><span class="comment">     * 注：若该函数在商家列表页通过单击事件调用，则详情页刷新后id值被刷新重置，不可取。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nId 要展示的商家id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">newShop</span>(<span class="params">state, nId</span>) &#123;</span><br><span class="line">      state.<span class="property">id</span> = nId;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改购物车(第二个参数传入对象)</span></span><br><span class="line">    <span class="title function_">changeCart</span>(<span class="params">state, data</span>) &#123;</span><br><span class="line">      data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">      <span class="keyword">let</span> flag = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 首先对购物车进行遍历,找到对应食品,再对其进行&#x27;+1/-1&#x27;</span></span><br><span class="line">      state.<span class="property">cart</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">shopId</span> == state.<span class="property">id</span> &amp;&amp; item.<span class="property">categoryId</span> == data.<span class="property">categoryId</span> &amp;&amp; item.<span class="property">foodId</span> == data.<span class="property">foodId</span>) &#123;</span><br><span class="line">          flag = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">if</span> (data.<span class="property">nums</span> == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">            item.<span class="property">nums</span> = <span class="title class_">String</span>(<span class="built_in">parseInt</span>(item.<span class="property">nums</span>) + <span class="number">1</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            item.<span class="property">nums</span> = <span class="title class_">String</span>(<span class="built_in">parseInt</span>(item.<span class="property">nums</span>) - <span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 若没有对应食品,则添加一条数据</span></span><br><span class="line">      <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">        state.<span class="property">cart</span>.<span class="title function_">push</span>(&#123; <span class="attr">shopId</span>: state.<span class="property">id</span>, <span class="attr">categoryId</span>: data.<span class="property">categoryId</span>, <span class="attr">foodId</span>: data.<span class="property">foodId</span>, <span class="attr">name</span>: data.<span class="property">name</span>, <span class="attr">price</span>: data.<span class="property">price</span>, <span class="attr">nums</span>: <span class="string">&#x27;1&#x27;</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空当前商家的购物车</span></span><br><span class="line">    <span class="title function_">emptyCart</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; state.<span class="property">cart</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (state.<span class="property">cart</span>[i].<span class="property">shopId</span> == state.<span class="property">id</span>) &#123;</span><br><span class="line">          state.<span class="property">cart</span>.<span class="title function_">splice</span>(i--, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 请求商家分类列表信息。</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">category</span>(<span class="params">context</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="keyword">await</span> fn.<span class="title function_">category</span>(context.<span class="property">state</span>.<span class="property">id</span>);</span><br><span class="line">      context.<span class="property">state</span>.<span class="property">category</span> = result.<span class="property">data</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求商家类别详情信息。</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">foodInfo</span>(<span class="params">context, categoryId</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="keyword">await</span> fn.<span class="title function_">foodInfo</span>(context.<span class="property">state</span>.<span class="property">id</span>, categoryId);</span><br><span class="line">      context.<span class="property">state</span>.<span class="property">foodInfo</span> = result.<span class="property">data</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>下面展示的是为“商家详情页”封装组件的<code>js</code>部分，该组件包括了商家的分类列表和分类项的详情菜单，如图：<br><img data-src="https://cdn.jsdelivr.net/gh/kxc0/tu_chuang/Blog/202208121133255.png" style="zoom:33%;" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; useStore &#125; from &quot;vuex&quot;;</span><br><span class="line">import &#123; computed, watch, onUpdated, ref &#125; from &quot;vue&quot;;</span><br><span class="line">import $ from &quot;jquery&quot;;</span><br><span class="line">import ShopInfoFoodBottom from &quot;./ShopInfoFoodBottom.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; ShopInfoFoodBottom &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const store = useStore();</span><br><span class="line">    // 获取vuex状态管理库中的数据</span><br><span class="line">    const baseUrl = computed(() =&gt; store.state.baseUrl);</span><br><span class="line">    const category = computed(() =&gt; store.state.category); // 获取商品分类列表</span><br><span class="line"></span><br><span class="line">    // 声明分类项id</span><br><span class="line">    const categoryId = ref(&quot;1&quot;);</span><br><span class="line"></span><br><span class="line">    // 对状态管理库中的‘商品分类列表’数据进行监听，请求到列表内容后，请求第一条分类信息</span><br><span class="line">    watch(</span><br><span class="line">      () =&gt; store.state.category,</span><br><span class="line">      (val, old) =&gt; &#123;</span><br><span class="line">        store.dispatch(&quot;foodInfo&quot;, val[0].id);</span><br><span class="line">        categoryId.value = store.state.category[0].id; // 分类列表请求成功后,将分类项id修改为列表第一项的id</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    // 请求商品分类列表</span><br><span class="line">    store.dispatch(&quot;category&quot;);</span><br><span class="line">    const foodInfo = computed(() =&gt; store.state.foodInfo); // 动态获取Vuex中的‘类别详情’</span><br><span class="line"></span><br><span class="line">    // 生命周期函数:view和model更新后--</span><br><span class="line">    onUpdated(() =&gt; &#123;</span><br><span class="line">      // 食品分类渲染完成后绑定事件，注：不能使用箭头函数因为：箭头函数没有自己的this</span><br><span class="line">      $(&quot;#food_category li&quot;).click(function () &#123;</span><br><span class="line">        // 将所有匹配项的 class 属性去掉，给点击项加上 class 属性</span><br><span class="line">        $(&quot;#food_category li&quot;).removeAttr(&quot;class&quot;);</span><br><span class="line">        $(this).attr(&quot;class&quot;, &quot;current&quot;);</span><br><span class="line">        // 将分类id修改为对应点击的分类项</span><br><span class="line">        categoryId.value = $(this).data(&quot;id&quot;);</span><br><span class="line">        // 小标题修改成对应的食品分类</span><br><span class="line">        title.innerHTML = $(this).children().first().html();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 获取单个食品数量</span><br><span class="line">    function foodNums(foodId) &#123;</span><br><span class="line">      let num = 0;</span><br><span class="line">      store.state.cart.find((item) =&gt; &#123;</span><br><span class="line">        if (</span><br><span class="line">          item.shopId == store.state.id &amp;&amp;</span><br><span class="line">          item.categoryId == categoryId.value &amp;&amp;</span><br><span class="line">          item.foodId == foodId</span><br><span class="line">        ) &#123;</span><br><span class="line">          num = item.nums;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      return num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 修改购物车方法</span><br><span class="line">    const changeCart = (foodId, name, price, nums) =&gt;</span><br><span class="line">      store.commit(</span><br><span class="line">        &quot;changeCart&quot;,</span><br><span class="line">        JSON.stringify(&#123;</span><br><span class="line">          categoryId: categoryId.value,</span><br><span class="line">          foodId: foodId,</span><br><span class="line">          name: name,</span><br><span class="line">          price: price,</span><br><span class="line">          nums: nums,</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    return &#123;</span><br><span class="line">      baseUrl, // 基准Url</span><br><span class="line">      category, // 获取商品分类列表</span><br><span class="line">      foodInfoFn: (id) =&gt; store.dispatch(&quot;foodInfo&quot;, id), // 请求分类详情</span><br><span class="line">      foodInfo, // 获取分类详情菜单</span><br><span class="line">      foodNums, // 获取单个菜品数量</span><br><span class="line">      changeCart, // 调用修改购物车方法</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>下面展示的是底部购物车组件<code>ShopInfoFoodBottom.vue</code>的<code>js</code>部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; computed, ref &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useStore &#125; from &quot;vuex&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const store = useStore();</span><br><span class="line"></span><br><span class="line">    // 判断是否显示购物车内容，默认不显示，点击小车后显示/隐藏购物车，点击灰色透明位置隐藏购物车</span><br><span class="line">    const flag = ref(false);</span><br><span class="line">    function control() &#123;</span><br><span class="line">      flag.value = !flag.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 修改购物车方法</span><br><span class="line">    const changeCart = (categoryId, foodId, name, price, nums) =&gt;</span><br><span class="line">      store.commit(</span><br><span class="line">        &quot;changeCart&quot;,</span><br><span class="line">        JSON.stringify(&#123;</span><br><span class="line">          categoryId: categoryId,</span><br><span class="line">          foodId: foodId,</span><br><span class="line">          name: name,</span><br><span class="line">          price: price,</span><br><span class="line">          nums: nums,</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    // 清空购物车</span><br><span class="line">    const emptyCart = () =&gt; store.commit(&quot;emptyCart&quot;);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      total: computed(() =&gt; store.getters.total), // 获取当前浏览商家界面购物车 总数量 和 总价格</span><br><span class="line">      info: computed(() =&gt; store.state.info), // 商家信息，用于获取“配送费”</span><br><span class="line">      flag, // 判断是否显示购物车详情</span><br><span class="line">      control, // 修改 判断条件（flag）的函数</span><br><span class="line">      changeCart, // 修改购物车</span><br><span class="line">      emptyCart, // 清空购物车</span><br><span class="line">      shops: computed(() =&gt; store.getters.shops), // 过滤后的购物车(当前商家)</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>购物车</tag>
      </tags>
  </entry>
  <entry>
    <title>提高代码复用性的方法</title>
    <url>/2022/05/12/02.%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="CSS公有样式（common-css）"><a href="#CSS公有样式（common-css）" class="headerlink" title="CSS公有样式（common.css）"></a>CSS公有样式（common.css）</h1><h2 id="样式分类"><a href="#样式分类" class="headerlink" title="样式分类"></a>样式分类</h2><ol>
<li><strong>格式化样式</strong>：（<code>global.css</code> | <code>reset.css</code>），默认样式的格式化【清除页面浏览器默认样式，保证初始样式在所有浏览器下一致】，字体默认设置。</li>
<li><strong>公共组件样式</strong>：（<code>common.css</code>），网站所有页面头部、底部样式都是一致的，而且很长时间不会有很大的改变，改变的大概就是产品、运营的经常需要添加、去掉某些入口的需求，要保证全站所有页面头部、页脚一次性生效【翻页、表单（输入框、按钮）等也是全站样式】。</li>
<li><strong>当前页面样式</strong>：（<code>layout.css</code>）要保证一个页面一个独立样式。方便增删改查。</li>
</ol>
<blockquote>
<p><code>global.css</code>和<code>common.css</code>可合并为一个文件，毕竟格式化样式也就那么几十行代码，且格式化样式和公共组件样式每个页面都会用得到。</p>
</blockquote>
<h2 id="“复位样式”和“共有样式”"><a href="#“复位样式”和“共有样式”" class="headerlink" title="“复位样式”和“共有样式”"></a>“复位样式”和“共有样式”</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">	<span class="attribute">font-family</span>: tahoma, arial, <span class="string">&#x27;Hiragino Sans GB&#x27;</span>, <span class="string">&#x27;\5b8b\4f53&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">	<span class="attribute">border-collapse</span>: collapse; <span class="comment">/* 合并为单一的边框 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">	<span class="attribute">list-style</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">1px</span>;</span><br><span class="line">	<span class="attribute">vertical-align</span>: middle; <span class="comment">/* 垂直方向居中对齐 */</span></span><br><span class="line">	<span class="attribute">line-height</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css定义超链接四个状态也有顺序的 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">	<span class="attribute">text-decoration</span>: none;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#1F376D</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">	<span class="attribute">text-decoration</span>: underline;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#BD0A01</span>;</span><br><span class="line">	<span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 阿里字体图标专用 */</span></span><br><span class="line"><span class="selector-class">.icon</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">	<span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">	fill: currentColor;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="前后端项目对公有部分的处理"><a href="#前后端项目对公有部分的处理" class="headerlink" title="前后端项目对公有部分的处理"></a>前后端项目对公有部分的处理</h1><h2 id="php-公有部分处理"><a href="#php-公有部分处理" class="headerlink" title="php 公有部分处理"></a>php 公有部分处理</h2><ol>
<li>新建<code>php</code>文件<code>init.php</code>，存放公有<code>php</code>代码：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type:application/json;charset=UTF8&#x27;</span>);</span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;ibook&#x27;</span>, <span class="number">3306</span>);</span><br><span class="line"><span class="title function_ invoke__">mysqli_set_charset</span>(<span class="variable">$conn</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"><span class="variable">$output</span> = []; <span class="comment">// 定义一个变量接收返回给前端的数据</span></span><br></pre></td></tr></table></figure></li>
<li>在局部<code>php</code>文件中引入公有文件：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;init.php&#x27;</span>);    <span class="comment">// 引入公有文件</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&#x27;SELECT title,pic,price FROM products ORDER BY pid DESC LIMIT 8&#x27;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">mysqli_fetch_all</span>(<span class="variable">$result</span>, MYSQLI_ASSOC);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$output</span>);</span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$conn</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="HTML-公有部分处理（一般为头部和尾部）"><a href="#HTML-公有部分处理（一般为头部和尾部）" class="headerlink" title="HTML 公有部分处理（一般为头部和尾部）"></a>HTML 公有部分处理（一般为头部和尾部）</h2><ol>
<li><p>新建两个<code>html</code>页面，存放公有部分的头和尾的代码片段，并在原来的地方添加父标记，用于设置头部和尾部：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--header--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header_box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">&lt;!--footer--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer_box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建<code>js</code>文件，通过<code>Ajax</code>获取到代码片段：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">loadHeader</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadHeader</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./header.html?123&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> res = xhr.<span class="property">response</span>;</span><br><span class="line">            header_box.<span class="property">innerHTML</span> = res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>也可通过 <code>jQuery</code> 的 <code>load()</code> 方法实现</p>
</blockquote>
<ol start="3">
<li>将<code>js</code>文件引入<code>html</code>代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>方法小结</category>
      </categories>
      <tags>
        <tag>代码复用</tag>
      </tags>
  </entry>
</search>
